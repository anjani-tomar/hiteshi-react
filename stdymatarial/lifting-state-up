/** "Lifting state up" in React refers to a technique where you move the state management from a child component up to its parent component.
  This is often necessary when multiple components need to share the same state or when two or more components need to communicate with each other via their parent.


Why Lift State Up?

Sharing State: Sometimes, multiple components in a React application need to share the same state.
                Rather than duplicating the state in each component, lifting state up to a common ancestor allows them to share the state.

Centralized State Management: Lifting state up can help in centralizing the management of state related to a particular feature or functionality. 
                                 This makes the code easier to understand and maintain.

Communicating Between Components: When two or more components need to pass data or trigger actions that affect each other, 
                                  lifting state up to their closest common ancestor allows them to communicate through props.

Example Scenario
Let's consider a simple example to illustrate lifting state up:

jsx
Copy code
import React, { useState } from 'react';

const ParentComponent = () => {
  const [count, setCount] = useState(0);

  const incrementCount = () => {
    setCount(count + 1);
  };

  const resetCount = () => {
    setCount(0);
  };

  return (
    <div>
      <h2>Counter App</h2>
      <p>Count: {count}</p>
      <ChildComponent count={count} onIncrement={incrementCount} onReset={resetCount} />
    </div>
  );
};

const ChildComponent = ({ count, onIncrement, onReset }) => {
  return (
    <div>
      <p>Count from Parent: {count}</p>
      <button onClick={onIncrement}>Increment</button>
      <button onClick={onReset}>Reset</button>
    </div>
  );
};

export default ParentComponent;
Explanation:
ParentComponent: Manages the count state using useState. It defines functions incrementCount and resetCount to update the state (count).

ChildComponent: Receives count as a prop from ParentComponent and also receives onIncrement and onReset functions as props to handle events.

Lifting State: In this example, ParentComponent owns the state (count) and the functions (incrementCount and resetCount) that modify the state. 
             It passes down count, incrementCount, and resetCount as props to ChildComponent,
              allowing ChildComponent to display the count and trigger state updates via the provided functions.

  ===============  Benefits of Lifting State Up: =======================

Centralization: State related to the counter (count) is managed in one place (ParentComponent), making it easier to understand and maintain.

Reusability: ChildComponent becomes more reusable since it doesn't manage its own stateâ€”it relies on props passed down from its parent.

Separation of Concerns: ParentComponent focuses on state management, while ChildComponent focuses on displaying data and handling user interactions.

When to Lift State Up?

Consider lifting state up when:

Multiple components need to share the same state.
Two or more components need to communicate with each other.
You want to centralize the logic and data related to a particular feature or functionality.
By lifting state up in React, you create a more cohesive and maintainable application structure, facilitating easier data flow and communication between components.
 */